package chapter02;

/*
    전역 변수
        메서드 사이에서 공유해서 사용할 수 있는 변수
        전역 변수 사용은 가급적 지양하는 것이 좋음
        대신 전역 변수는 읽기 전용으로 값을 공유해서 전역 상수로 쓰는 것은 활용도가 높아 추천함

    Start5 클래스의 정적 변수 share는 메서드 사이에서 공유해서 사용할 수 있는 전역 변수로 사용됨
        전역 변수 : 스택 프레임에 독립적임
        지역 변수 : 스택 프레임에 종속적임
        main(), func() 메서드 모두 정적 변수 share에 접근하고, 공유해서 사용할 수 있음

    전역 변수 사용을 지양해야 하는 이유
        여러 메서드에서 전역 변수의 값을 변경하면 전역 변수에 저장된 값을 파악하기가 어려움
        멀티 스레드 프로그램에서 문제를 일으키기 쉬움

    멀티 스레드의 T메모리
        멀티 스레드는 스택 영역을 스레드 갯수만큼 분할해서 사용함
        스태틱 영역과 힙 영역은 공유해서 사용함

    멀티 스레드에서 전역 변수 사용의 문제점(두 개의 스레드를 사용하는 프로그램)
        스레드1이 공유 영역(스태틱, 힙)에 있는 전역 변수 A에 10을 할당함
        스레드2가 전역 변수 A에 20을 할당함
        스레드1이 전역 변수 A에 접근하면 10이 아닌 20을 사용하게 됨
    이처럼 '쓰기 가능한 전역 변수'를 사용하면 '스레드 안정성이 깨진다'라고 표현함
        이를 보완하기 위해 락(lock)을 사용할 수 있음
 */

public class Start5 {

    // 정적 변수
    //  Start5 클래스가 스태틱 영역에 배치될 때 그 안에 share 정적 변수의 공간이 만들어지고 값이 할당됨
    //  두 메서드 사이에서 공유해서 사용하는 전역 변수로 사용되고 있음
    static int share;

    public static void main(String[] args) {
        share = 55;

        int k = func(5, 7);

        System.out.println(share);
    }

    private static int func(int m, int p) {
        share = m + p;

        return m - p;
    }
}
