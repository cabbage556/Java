package Volume1.chapter10;

/*
    상속 사용 이유
        - 상위 클래스의 변수, 메서드를 상속해 중복 작업을 줄일 수 있음
        - 하나의 상위 클래스를 잘 구현해두고, 그 클래스를 상속해 추가적인 기능을 넣을 수 있음
        - 여러 클래스가 상속하는 클래스를 수정하면 이 클래스를 상속하는 모든 클래스들에게 수정 사항이 동일하게 적용됨
 */
/*
    자바는 단일 상속만 지원함
        - 여러 클래스를 동시에 상속할 수 없음
        - extends 뒤에 하나의 클래스만 지정할 수 있음
 */

/*
    extends Parent : Parent 클래스를 상속(확장)함
        - Parent 클래스의 private 변수, 메서드를 제외한 나머지 변수, 메서드를 자신의 변수, 메서드처럼 사용할 수 있음
        - Parent 클래스가 다른 패키지에 존재한다면 package-private 변수, 메서드는 사용할 수 없음
 */
public class Child extends Parent {

    public Child() {
        /*
            상위 클래스의 기본 생성자는 자동 호출됨
                하위 클래스의 생성자에서 super()를 명시적으로 호출하지 않으면 컴파일 시 자동으로 하위 클래스의 생성자 첫 번째 줄에 super()가 추가됨
                    상위 클래스의 기본 생성자 호출 코드가 컴파일 시 자동으로 삽입되는 것
                상위 클래스에 기본 생성자가 아닌 생성자가 존재하는 경우에는 반드시 명시적으로 상위 클래스의 생성자를 호출해야 함
                    클래스에 기본 생성자가 아닌 생성자가 존재하면 컴파일 시 기본 생성자가 자동으로 추가되지 않기 때문
                    따라서 상위 클래스의 생성자를 명시적으로 호출해야 함
         */
        // super();
        System.out.println("Child.Child");
    }
}
