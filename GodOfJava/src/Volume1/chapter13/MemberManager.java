package Volume1.chapter13;

/*
    인터페이스
        - 실제 코드는 만들지 않더라도 어떤 메서드들이 있어야 하는지를 정의할 때 인터페이스 사용
        - 인터페이스 내부에 선언한 메서드들은 메서드 바디가 존재하면 안 됨
        - implements 키워드를 사용해 구현할 인터페이스를 명시함
        - 구현한다고 선언한 인터페이스의 모든 메서드들을 구현해야 함
        - 클래스 상속과 달리 구현할 인터페이스를 여러 개 명시할 수 있음

    인터페이스 선언 방법 : interface 키워드 사용

    인터페이스에는 구현된 코드가 없으므로 인터페이스 그 자체를 사용할 수 없음
        - 생성자가 없음 : 인터페이스의 객체는 생성 불가능
        - 메서드 바디가 없음 : 메서드 바디가 없는 메서드를 호출할 수 없음

    인터페이스 활용
        - 상속 관계의 캐스팅을 활용함
            - 인터페이스가 인터페이스를 구현한 클래스의 상위 타입 역할을 하는 것
        - 인터페이스를 구현한 클래스의 객체를 생성하고, 인터페이스가 갖는 메서드를 호출함
            - 클래스가 실제로 구현한 메서드가 호출됨

    인터페이스 사용 이유
        - 설계 단계 산출물과 개발 단계 산출물을 관리할 수 있음
            - 설계 단계 : 인터페이스를 선언함
            - 개발 단계 : 인터페이스를 구현하는 클래스를 선언함(메서드 구현)
 */

// MemberManager 인터페이스 선언
public interface MemberManager {
    boolean addMember(MemberDTO member);
    boolean removeMember(String name, String phone);
    boolean updateMember(MemberDTO member);
}
