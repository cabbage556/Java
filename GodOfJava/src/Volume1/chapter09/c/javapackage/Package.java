/*
    패키지
        - 클래스들을 구분하는 디렉터리와 비슷한 개념
        - 클래스들을 잘 분류하기 위해 존재함
        - 애플리케이션 개발 시 클래스들을 분류하는 이유
            - 클래스 이름이 중복될 수 있음
            - 클래스가 어떤 역할을 담당하는지를 나타낼 수 있음
        - 일반적으로 패키지를 사용해 클래스들을 분류함

    컴파일 및 실행
        - 컴파일 : 최상위 디렉터리에서 javac 명령어를 실행함
        - 실행 : 최상위 디렉터리에서 java 명령어를 실행함
            - 패키지의 최상위 디렉터리에서 실행해야 한다는 약속이 존재함
            - 패키지의 최상위 디렉터리에서 실행하지 않으면 클래스 파일을 찾지 못하는 에러가 발생함

    패키지 선언문 제약사항
        - 소스의 가장 첫 줄에 위치해야 함
            - 패키지 선언문 위에 공백이나 주석은 상관 없음
            - 패키지 선언문 위에 자바 문장이 하나라도 존재하면 컴파일 에러가 발생함
        - 소스 하나에 하나만 존재해야 함
            - 하나의 소스 파일이 두 개의 패키지에 한 번에 존재할 수 없기 때문
        - 패키지 이름과 디렉터리 이름이 같아야 함
            - 자바 파일이 위치한 디렉터리 이름과 패키지 이름이 다르면 자바 파일을 찾지 못해 컴파일 에러가 발생함
            - 패키지 이름을 지정할 때 파일이 위치한 디렉터리 이름과 동일하게 패키지 이름을 지정해야 함

    패키지 이름 제약사항
        - 패키지 이름은 java로 시작할 수 없음
            - java : 자바 기본 패키지 이름
        - 패키지 이름은 모두 소문자로 지정해야 함
            - 대부분의 자바 개발자들이 패키지 이름을 소문자로 작성함
        - 자바 예약어는 사용할 수 없음
            - int 등의 자바 예약어가 패키지 이름에 포함되어 있으면 안 됨
 */

/*
    import문
        - 사용하려는 클래스가 다른 패키지에 위치한다면 import문을 사용해 임포트해야 함
        - "import 패키지이름.패키지이름.클래스이름"을 명시해 해당 패키지에 존재하는 클래스를 사용한다는 것을 컴파일러에게 알려주는 것
        - 컴파일러는 import문을 확인하고 import한 클래스가 어떤 패키지에 위치하는지를 알고 컴파일할 수 있음
        - 컴파일러는 import문에 명시한 클래스를 먼저 컴파일하고, import문을 작성한 클래스를 컴파일함

    import문 작성하기
        - 패키지 선언문과 클래스 선언문 사이에 import문을 작성함
            - 패키지 선언문 아래, 클래스 선언문 위

    import 하는 클래스가 많은 경우 쉽게 import 하는 방법 : *
        - 어떤 패키지로부터 임포트해야 하는 클래스가 많은 경우 쉽게 임포트하는 방법
        - "import 패키지이름.패키지이름.*"을 명시해 해당 패키지에 존재하는 모든 클래스들을 임포트함
        - 해당 패키지의 하위 패키지의 클래스들은 임포트하지 않음
            - import Volume1.chapter09.c.* -> Volume1.chapter09.c 패키지의 클래스들만 임포트
            - import Volume1.chapter09.*   -> Volume1.chapter09 패키지의 클래스들만 임포트

    import 없이 사용할 수 있는 클래스
        - 같은 패키지의 클래스들 : 같은 패키지의 클래스들은 임포트하지 않고 바로 사용 가능
        - java.lang 패키지의 클래스들 : 자주 사용하는 클래스들이므로 별도로 임포트하지 않고 바로 사용 가능

    import 여부
        - 같은 패키지에 있음 : import 하지 않음
        - 다른 패키지에 있음 : import 해야 함
        - 상위 패키지와 하위 패키지는 서로 다른 패키지이므로 상위 패키지의 클래스도 하위 패키지의 클래스를 임포트해서 사용해야 함
 */

// 패키지 선언문
package Volume1.chapter09.c.javapackage;

// import문
import Volume1.chapter09.c.javapackage.sub.Sub;
import Volume1.chapter09.c.javapackage.sub.*;

public class Package {
    public static void main(String[] args) {
        // Volume1.chapter09.c.javapackage.sub 패키지에 있는 Sub 클래스의 객체 생성
        //      Sub 클래스가 Package 클래스와 서로 다른 패키지에 위치하므로 import 필요
        Sub sub = new Sub();
        sub.subClassMethod();
    }
}
